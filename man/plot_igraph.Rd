% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_functions.R
\name{plot_igraph}
\alias{plot_igraph}
\alias{return_layout}
\alias{return_layout_phenotype}
\alias{orderGraphWeights}
\alias{heatmapplot}
\alias{plot_expression_row}
\alias{plot_correlation_row}
\alias{plot_gene_pair_scatter}
\alias{plot_gene_pair_scatter_by_class}
\title{Plotting functions for Gene Regulatory Network.}
\usage{
plot_igraph(mygraph = NULL, mytitle = "", titlecol = "black", mylayout = NULL)

return_layout(regs = NULL, targets = NULL, namehash = NULL)

return_layout_phenotype(
  regs = NULL,
  targets = NULL,
  varfile = NULL,
  namehash = NULL
)

orderGraphWeights(graph, edgelist)

heatmapplot(
  heatm,
  plotname = "",
  myzlim = c(min(heatm), max(heatm)),
  cvec = c("red", "white", "blue"),
  showRows = T
)

plot_expression_row(
  mymat = NULL,
  rowdesc = "Regulators",
  plotheight = 200,
  myshowrows = TRUE,
  samps2pheno = NULL,
  phenostrs = c("nonrespond", "responder"),
  htmlfile = "./",
  imgdir = "imgs/",
  modnum = 1,
  plotwidth = 800,
  mycvec = c("darkorange", "gray100", "darkblue"),
  plotzlim = c(-10, 10)
)

plot_correlation_row(
  cormats = NULL,
  rowdesc = "regulators",
  xnames = NULL,
  ynames = NULL,
  plotheight = 200,
  myshowrows = TRUE,
  htmlfile = "./",
  imgdir = "imgs/",
  modnum = 1,
  plotwidth = 200,
  mycvec = c("darkred", "gray100", "darkgreen"),
  plotzlim = c(-1, 1),
  plottitle = NULL
)

plot_gene_pair_scatter(
  pname,
  myx,
  myy,
  xgenename,
  ygenename,
  mylabels,
  alltext = NULL,
  plotdir = ""
)

plot_gene_pair_scatter_by_class(
  plotdir,
  pname,
  myx,
  myy,
  xgenename,
  ygenename,
  mylabels,
  lab1text,
  lab2text,
  alltext
)
}
\arguments{
\item{mygraph}{igraph object returned from \code{NET_run()}.}

\item{mytitle}{Desired tittle.}

\item{titlecol}{Color for the tittle.}

\item{mylayout}{desired layout.}

\item{regs}{regulators name list}

\item{targets}{targets name list}

\item{namehash}{list containing the drivers genes as names and transcripts as values.
If only genes are required, leave it empty.}

\item{varfile}{two column file containing, gene names as rows,
t-statistic from the differential expression analysis of the desired phenotype column and
a boolean variable for regulator (1) - no regulator (0) column.}

\item{graph}{igraph object}

\item{edgelist}{list containing the edges of the igraph object.}

\item{heatm}{input matrix for plot.}

\item{plotname}{name of the plot.}

\item{myzlim}{the range of z values for which colors should be plotted.}

\item{cvec}{vector of colors for the palette of the plot.}

\item{showRows}{boolean specifying the option of showing row names.}

\item{mymat}{input matrix for plot.}

\item{rowdesc}{name uses to specify regulator.}

\item{plotheight}{height of the plot.}

\item{myshowrows}{boolean specifying the option of showing row names.}

\item{samps2pheno}{matrix of sample to phenotype.}

\item{phenostrs}{strings uses distinguish for phenotypes.}

\item{htmlfile}{directory to html files.}

\item{imgdir}{directory for image.}

\item{modnum}{the number of supermodule.}

\item{plotwidth}{width of the plot.}

\item{mycvec}{vector of colors for the palette of the plot.}

\item{plotzlim}{the range of z values for which colors should be plotted.}

\item{cormats}{input correlation matrix for plot.}

\item{xnames}{names for the x axis.}

\item{ynames}{names for the x axis.}

\item{plottitle}{the title of the plot.}

\item{pname}{name for the plot.}

\item{myx}{the coordinates of points of the first gene.}

\item{myy}{the coordinates of points of the second gene.}

\item{xgenename}{the names of the first gene.}

\item{ygenename}{the names of the second gene.}

\item{mylabels}{integer class labels.}

\item{alltext}{text label for the plot.}

\item{plotdir}{directory for the plot.}

\item{lab1text}{text label of a class.}

\item{lab2text}{text label of the other class.}
}
\value{
plot of the desired single GRN using a specific layout.
}
\description{
Collection of functions for generating graphs layouts to plot GRN obtained from \code{NET_run()} method.
\code{return_layout()} generates a layout from the graph object returned by \code{NET_run()} and \code{return_layout_phenotype()}
plots targets according to the t-statistic from the differential expression analysis of the desired phenotype.
\code{plot_igraph()} takes in the igraph object and generated layout and generates plot.
}
\examples{

   ## Assume we have run the rewiring method and the `NET_run()` method to generate the
   ## igraph object. We are going to generate and plot both layouts for the example.
   ## We are going to generate all the files we need except for the igraph object, which
   ## is included as an example file in this package.

   ## We load the igraph object that we generated from the `NET_run()` example.
   ## Note: the igraph object is inside the list `NET_run()` generates.

   graph <- readRDS(paste0(system.file('extdata',package='TraRe'),
                    '/graph_netrun_example.rds'))$graphs$VBSR

   ## We first generate the normal layout for the plot.
   ## We need the drivers and target names.

   drivers <- readRDS(paste0(system.file('extdata',package='TraRe'),'/tfs_linker_example.rds'))
   drivers_n <- rownames(drivers)

   targets <- readRDS(paste0(system.file('extdata',package='TraRe'),'/targets_linker_example.rds'))
   targets_n <- rownames(targets)

   ## As for this example we are working at gene level (we dont have transcripts inside genes),
   ## we will generate a dictionary with genes as keys and values (see param `namehash`)

   normal_layout <- return_layout(drivers_n,targets_n)

   ## We now generate the phenotype layout and the `varfile` we ned for this layout.
   ## (I leave here a way to generate) We need to separate our expression matrix by
   ## a binary phenotype, for this case, i will consider the first 40 samples are
   ## responding to a treatment (R) and the rest not (NR).

   gnames <- c(drivers_n,targets_n)
   expmat <-rbind(drivers,targets)

   phenotype <- utils::read.delim(paste0(system.file('extdata',package='TraRe'),
                                  '/phenotype_rewiring_example.txt'))

   expmat_R <- expmat[,phenotype$Class=='R']
   expmat_NR <- expmat[,phenotype$Class=='NR']


   varfile <- t(as.matrix(sapply(gnames,
              function(x) c(stats::t.test(expmat_R[x,],expmat_NR[x,])$statistic,
              if(x\%in\%drivers_n) 1 else 0))))

   colnames(varfile)<-c('t-stat','is-regulator')

   phenotype_layout <- return_layout_phenotype(drivers_n,targets_n,varfile)

   plot_igraph(graph,mytitle='Normal Layout',titlecol='black',mylayout=normal_layout)
   plot_igraph(graph,mytitle='Phenotype Layout',titlecol='black',mylayout=phenotype_layout)

}
