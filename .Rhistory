gnames <- c(drivers_n,targets_n)
expmat <-rbind(drivers,targets)
dim(expmat)
expmat_R <- expmat[,1:40]
expmat_NR <- expmat[,40+(1:28)]
varfile <- t(as.matrix(sapply(gnames,function(x) c(stats::t.test(expmat_R[x,],expmat_NR[x,])$statistic, if(x%in%drivers_n) 1 else 0))))
colnames(varfile)<-c("t-stat","is-regulator")
phenotype_layout <- return_layout_phenotype(drivers_n,targets_n,varfile)
plot_igraph(graph,"Normal Layout","black",normal_layout)
varfile
normal_layout
plot_igraph(graph,"Phenotype Layout","black",phenotype_layout)
plot_igraph <- function(mygraph, mytitle, titlecol, mylayout){
nodecol <- c("darkblue", "darkorange")
framecol <- c("black", "darkorange")
shape <- c("circle", "square")
edge_cscale <- grDevices::colorRamp(c("darkred", "lightgrey", "darkgreen"))
igraph::E(mygraph)$weight <- rep(1,length(igraph::E(mygraph))) #assign weight 1.
maxw=max(abs(igraph::E(mygraph)$weight))
tweight = (igraph::E(mygraph)$weight+maxw)/(2*maxw)
tweight <- rep(1, length(E(mygraph)))
igraph::E(mygraph)$color <- apply(edge_cscale(tweight), 1,
function(x) grDevices::rgb(x[1] / 255, x[2] / 255,
x[3] / 255, 0.8))
degrees = igraph::degree(mygraph, igraph::V(mygraph)$name)
#show(degrees)
nodenames = mylayout$genesnames[igraph::V(mygraph)$name]
#show(nodenames)
regdegrees = degrees[nodenames]
regdegrees[which(is.na(regdegrees))]=""
#show(regdegrees)
finalnames = apply(cbind(nodenames,regdegrees),1,paste, collapse=" - ")
plot(mygraph,
vertex.color = nodecol[as.numeric(igraph::V(mygraph)$type) + 1],
vertex.shape = shape[as.numeric(igraph::V(mygraph)$type) + 1],
vertex.label = finalnames,
vertex.label.cex = 1.5,
#vertex.label.cex = 3.5,
vertex.frame.color = framecol[as.numeric(igraph::V(mygraph)$type) + 1],
#vertex.size = as.numeric(V(mygraph)$type)*10 + 10,
vertex.size = as.numeric(igraph::V(mygraph)$type)*5 + 5,
layout = cbind(mylayout$genesx[igraph::V(mygraph)$name],
mylayout$genesy[igraph::V(mygraph)$name]
)
)
graphics::title(paste0(mytitle, " ", sum(igraph::V(mygraph)$type==1), "&", sum(igraph::V(mygraph)$type==0)), cex.main = 5, col.main = titlecol)
graphics::abline(h=0, col=grDevices::rgb(0,0,0,alpha=0.3))
}
plot_igraph(graph,"Normal Layout","black",normal_layout)
plot_igraph <- function(mygraph, mytitle, titlecol, mylayout){
nodecol <- c("darkblue", "darkorange")
framecol <- c("black", "darkorange")
shape <- c("circle", "square")
edge_cscale <- grDevices::colorRamp(c("darkred", "lightgrey", "darkgreen"))
igraph::E(mygraph)$weight <- rep(1,length(igraph::E(mygraph))) #assign weight 1.
maxw <- max(abs(igraph::E(mygraph)$weight))
#tweight = (igraph::E(mygraph)$weight+maxw)/(2*maxw)
tweight <- rep(1, length(E(mygraph)))
igraph::E(mygraph)$color <- apply(edge_cscale(tweight), 1,
function(x) grDevices::rgb(x[1] / 255, x[2] / 255,
x[3] / 255, 0.8))
degrees = igraph::degree(mygraph, igraph::V(mygraph)$name)
#show(degrees)
nodenames = mylayout$genesnames[igraph::V(mygraph)$name]
#show(nodenames)
regdegrees = degrees[nodenames]
regdegrees[which(is.na(regdegrees))]=""
#show(regdegrees)
finalnames = apply(cbind(nodenames,regdegrees),1,paste, collapse=" - ")
plot(mygraph,
vertex.color = nodecol[as.numeric(igraph::V(mygraph)$type) + 1],
vertex.shape = shape[as.numeric(igraph::V(mygraph)$type) + 1],
vertex.label = finalnames,
vertex.label.cex = 1.5,
#vertex.label.cex = 3.5,
vertex.frame.color = framecol[as.numeric(igraph::V(mygraph)$type) + 1],
#vertex.size = as.numeric(V(mygraph)$type)*10 + 10,
vertex.size = as.numeric(igraph::V(mygraph)$type)*5 + 5,
layout = cbind(mylayout$genesx[igraph::V(mygraph)$name],
mylayout$genesy[igraph::V(mygraph)$name]
)
)
graphics::title(paste0(mytitle, " ", sum(igraph::V(mygraph)$type==1), "&", sum(igraph::V(mygraph)$type==0)), cex.main = 5, col.main = titlecol)
graphics::abline(h=0, col=grDevices::rgb(0,0,0,alpha=0.3))
}
plot_igraph(graph,"Normal Layout","black",normal_layout)
igraph::E(mygraph)
igraph::E(graph)
plot_igraph <- function(mygraph, mytitle, titlecol, mylayout){
nodecol <- c("darkblue", "darkorange")
framecol <- c("black", "darkorange")
shape <- c("circle", "square")
edge_cscale <- grDevices::colorRamp(c("darkred", "lightgrey", "darkgreen"))
igraph::E(mygraph)$weight <- rep(1,length(igraph::E(mygraph))) #assign weight 1.
maxw <- max(abs(igraph::E(mygraph)$weight))
#tweight = (igraph::E(mygraph)$weight+maxw)/(2*maxw)
tweight <- rep(1, length(igraph::E(mygraph)))
igraph::E(mygraph)$color <- apply(edge_cscale(tweight), 1,
function(x) grDevices::rgb(x[1] / 255, x[2] / 255,
x[3] / 255, 0.8))
degrees = igraph::degree(mygraph, igraph::V(mygraph)$name)
#show(degrees)
nodenames = mylayout$genesnames[igraph::V(mygraph)$name]
#show(nodenames)
regdegrees = degrees[nodenames]
regdegrees[which(is.na(regdegrees))]=""
#show(regdegrees)
finalnames = apply(cbind(nodenames,regdegrees),1,paste, collapse=" - ")
plot(mygraph,
vertex.color = nodecol[as.numeric(igraph::V(mygraph)$type) + 1],
vertex.shape = shape[as.numeric(igraph::V(mygraph)$type) + 1],
vertex.label = finalnames,
vertex.label.cex = 1.5,
#vertex.label.cex = 3.5,
vertex.frame.color = framecol[as.numeric(igraph::V(mygraph)$type) + 1],
#vertex.size = as.numeric(V(mygraph)$type)*10 + 10,
vertex.size = as.numeric(igraph::V(mygraph)$type)*5 + 5,
layout = cbind(mylayout$genesx[igraph::V(mygraph)$name],
mylayout$genesy[igraph::V(mygraph)$name]
)
)
graphics::title(paste0(mytitle, " ", sum(igraph::V(mygraph)$type==1), "&", sum(igraph::V(mygraph)$type==0)), cex.main = 5, col.main = titlecol)
graphics::abline(h=0, col=grDevices::rgb(0,0,0,alpha=0.3))
}
#' @export
#' @rdname plot_igraph
#' @param regs regulators name list
#' @param targets targets name list
#' @param namehash dictionary with genes as keys and transcripts as values.
#' If there is no transcripts, build the dictionary with genes as keys and values. ({"g1":"g1","g2":"g2"})
return_layout <- function(regs, targets, namehash){
nregs <- length(regs)
myratio <- length(targets) / nregs
genesx <- c(1:nregs * myratio - myratio / 2, 1:length(targets))
names(genesx) <- c(regs, targets)
genesy <- c(rep(c(1, -1), nregs)[1:nregs] * (1 + stats::runif(nregs)),
rep(0, length(targets)))
names(genesy) <- c(regs, targets)
#genesnames <- c(namehash[regs], rep("", length(targets)))
genesnames <- c(regs, rep("", length(targets)))
names(genesnames) <- c(regs, targets)
return(list(genesx = genesx, genesy = genesy,
genesnames = genesnames))
}
plot_igraph(graph,"Normal Layout","black",normal_layout)
normal_layout
varfile
plot_igraph <- function(mygraph, mytitle, titlecol, mylayout){
nodecol <- c("darkblue", "darkorange")
framecol <- c("black", "darkorange")
shape <- c("circle", "square")
edge_cscale <- grDevices::colorRamp(c("darkred", "lightgrey", "darkgreen"))
igraph::E(mygraph)$weight <- rep(1,length(igraph::E(mygraph))) #assign weight 1.
maxw <- max(abs(igraph::E(mygraph)$weight))
tweight = (igraph::E(mygraph)$weight+maxw)/(2*maxw)
igraph::E(mygraph)$color <- apply(edge_cscale(tweight), 1,
function(x) grDevices::rgb(x[1] / 255, x[2] / 255,
x[3] / 255, 0.8))
degrees = igraph::degree(mygraph, igraph::V(mygraph)$name)
#show(degrees)
nodenames = mylayout$genesnames[igraph::V(mygraph)$name]
#show(nodenames)
regdegrees = degrees[nodenames]
regdegrees[which(is.na(regdegrees))]=""
#show(regdegrees)
finalnames = apply(cbind(nodenames,regdegrees),1,paste, collapse=" - ")
plot(mygraph,
vertex.color = nodecol[as.numeric(igraph::V(mygraph)$type) + 1],
vertex.shape = shape[as.numeric(igraph::V(mygraph)$type) + 1],
vertex.label = finalnames,
vertex.label.cex = 1.5,
#vertex.label.cex = 3.5,
vertex.frame.color = framecol[as.numeric(igraph::V(mygraph)$type) + 1],
#vertex.size = as.numeric(V(mygraph)$type)*10 + 10,
vertex.size = as.numeric(igraph::V(mygraph)$type)*5 + 5,
layout = cbind(mylayout$genesx[igraph::V(mygraph)$name],
mylayout$genesy[igraph::V(mygraph)$name]
)
)
graphics::title(paste0(mytitle, " ", sum(igraph::V(mygraph)$type==1), "&", sum(igraph::V(mygraph)$type==0)), cex.main = 5, col.main = titlecol)
graphics::abline(h=0, col=grDevices::rgb(0,0,0,alpha=0.3))
}
plot_igraph(graph,"Normal Layout","black",normal_layout)
normal_layout
foo <- c("v1","v2","v3","v4","v5","v6")
names(foo) <- c("n1","n2","n3","n4","n5","n6")
foo["n1"]
foo[c('n1','n2','n3')]
drivers_n
targets_n
namehash
normal_layout
f1 <- graph
mytittle <- "hey"
f2 <- "hey"
f3 <- 1
f4 <- normal_layout
plot_igraph(f1,f2,f3,f4)
mygraph <- f1
mytitle <- f2
titlecol <- f3
mylayout <- f4
nodecol <- c("darkblue", "darkorange")
framecol <- c("black", "darkorange")
shape <- c("circle", "square")
edge_cscale <- grDevices::colorRamp(c("darkred", "lightgrey", "darkgreen"))
igraph::E(mygraph)$weight <- rep(1,length(igraph::E(mygraph))) #assign weight 1.
maxw <- max(abs(igraph::E(mygraph)$weight))
tweight = (igraph::E(mygraph)$weight+maxw)/(2*maxw)
igraph::E(mygraph)$color <- apply(edge_cscale(tweight), 1,
function(x) grDevices::rgb(x[1] / 255, x[2] / 255,
x[3] / 255, 0.8))
degrees = igraph::degree(mygraph, igraph::V(mygraph)$name)
#show(degrees)
nodenames = mylayout$genesnames[igraph::V(mygraph)$name]
#show(nodenames)
regdegrees = degrees[nodenames]
regdegrees[which(is.na(regdegrees))]=""
#show(regdegrees)
finalnames = apply(cbind(nodenames,regdegrees),1,paste, collapse=" - ")
plot(mygraph,
vertex.color = nodecol[as.numeric(igraph::V(mygraph)$type) + 1],
vertex.shape = shape[as.numeric(igraph::V(mygraph)$type) + 1],
vertex.label = finalnames,
vertex.label.cex = 1.5,
#vertex.label.cex = 3.5,
vertex.frame.color = framecol[as.numeric(igraph::V(mygraph)$type) + 1],
#vertex.size = as.numeric(V(mygraph)$type)*10 + 10,
vertex.size = as.numeric(igraph::V(mygraph)$type)*5 + 5,
layout = cbind(mylayout$genesx[igraph::V(mygraph)$name],
mylayout$genesy[igraph::V(mygraph)$name]
)
)
mylayout$genesx[igraph::V(mygraph)$name]
mylayout$genesy[igraph::V(mygraph)$name]
cbind(mylayout$genesx[igraph::V(mygraph)$name],
mylayout$genesy[igraph::V(mygraph)$name]
)
mylayout$genesx
mylayout$genesy
igraph::V(mygaph)
igraph::V(mygraph)
igraph::V(mygraph)$name
mylayout$genesx[igraph::V(mygraph)$name]
drivers <- readRDS(paste0(system.file("extdata",package="TraRe"),'/tfs_cliques_example.rds'))
targets <- readRDS(paste0(system.file("extdata",package="TraRe"),'/targets_linker_example.rds'))
lognorm_est_counts <- rbind(drivers[1:5,],targets[1:30,])
regulator_filtered_idx <- 1:5
target_filtered_idx <- 5+c(1:30)
graph <- NET_run(lognorm_est_counts,target_filtered_idx,regulator_filtered_idx,graph_mode="VBSR")
saveRDS(graph,file=paste0(path,'graph_netrun_example.rds'))
devtools::check(document = T)
graph <- readRDS(paste0(system.file("extdata",package="TraRe"),'/graph_netrun_example.rds'))
drivers <- readRDS(paste0(system.file("extdata",package="TraRe"),'/tfs_cliques_example.rds'))
drivers_n <- rownames(drivers)[1:5]
targets <- readRDS(paste0(system.file("extdata",package="TraRe"),'/targets_linker_example.rds'))
targets_n <- rownames(targets)[1:30]
namehash <- drivers_n
normal_layout <- return_layout(drivers_n,targets_n,namehash)
gnames <- c(drivers_n,targets_n)
expmat <-rbind(drivers,targets)
expmat_R <- expmat[,1:40]
expmat_NR <- expmat[,40+(1:28)]
varfile <- t(as.matrix(sapply(gnames,function(x) c(stats::t.test(expmat_R[x,],expmat_NR[x,])$statistic,if(x%in%drivers_n) 1 else 0))))
colnames(varfile)<-c("t-stat","is-regulator")
phenotype_layout <- return_layout_phenotype(drivers_n,targets_n,varfile)
normal_layout
saveRDS(graph$graphs$VBSR,file=paste0(path,'graph_netrun_example.rds'))
devtools::check(document = T)
saveRDS(prepared[[1]],file=paste0(path,'prepared_rewiring_example.rds'))
1 | 0
1 || 0
?grep
?xor
devtools::check(document = T)
devtools::check(document = T)
devtools::check(document = T)
devtools::check(document = T)
?vapply
?length
?seq_len()
seq_len(c(1,2,3))
seq_len(3)
seq_along(5)
seq_along(c(1,2,3))
seq_along(c(5,21,2)
)
ff<-list(hey=1,hou=4,hh=5)
seq_along(ff)
?set.seed
?getwd
?dir.create
?paste0
dir.create(paste0(getwd(),'/examplefolder'))
devtools::check(document = T)
devtools::check(document = T)
?vapply
vapply(c(1,2,3),sum,FUN.VALUE = integer)
?fivenum
fivenum(1)
fivenum(3)
fivenum(1)
fivenum(5)
?sapply
devtools::check(document = T)
1.0 == 1
1 == 1.0
1.1 == 1
devtools::check(document = T)
devtools::check(document = T)
devtools::check(document = T)
evidpath <- paste0(system.file("extdata",package="TraRe"),'/Tumor_OV50_intersectBed.weighted_evidence.txt')
rfiles <- c(paste0(system.file("extdata",package="TraRe"),'/Tumor_OV50.tar8855_reg638.VBSR.m100_b10.rds'), paste0(system.file("extdata",package="TraRe"),'/Tumor_OV50.tar8855_reg638.VBSR.single_gene.rds'))
tagstr <- "Tumor_OV50.tar8855_reg638"
mapfile <- paste0(system.file("extdata",package="TraRe"),'/Tumor_OV50.gene_info.txt')
getwd()
dir.create(paste0(getwd(),'/summaryfolder'),showWarnings=FALSE)
outdir <- paste0(getwd(),'/summaryfolder')
outdir <- paste0(getwd(),'/summaryfolder/')
create_html_summary(rfiles,tagstr,mapfile,outdir,evidpath)
system.file("extdata",package="TraRe")
create_html_summary <- function(rfiles,tagstr,mapfile,outdir = getwd(),evidfile){
runinfo <- list()
runinfo$rfiles <- rfiles
runinfo$tagstr <- tagstr
runinfo$mapfile <- mapfile
runinfo$outdir <- outdir
runinfo$evidfile <- evidfile
#################### load information on gene identifiers ####################
methods::show(paste0("Loading id conversion table: ", runinfo$mapfile, "..."))
iso_table <- as.matrix(utils::read.table(runinfo$mapfile, header = TRUE, sep = "\t",
quote = ""))
rownames(iso_table) <- iso_table[, "uniq_isos"]
all_reg_genes <- iso_table[which(iso_table[, "regulator"] == 1),
"iso_gnames"]
all_tar_genes <- iso_table[which(iso_table[, "regulator"] == 0),
"iso_gnames"]
runinfo$nregs <- length(all_reg_genes)
runinfo$ntargets <- length(all_tar_genes)
################ create overall summary for html index page #################
indexpath <- paste(sep = ".", "index",  runinfo$tagstr, "html")
htmlinfo <- linker_create_index_page(outdir = runinfo$outdir,
runtag = runinfo$tagstr,
indexpath = indexpath,
codedir = paste0(system.file("extdata",package="TraRe"),'/'))
# write gene info stats
write(paste0("<br>", length(all_tar_genes), " target isoforms covering ",
length(unique(all_tar_genes)), " genes.<br>"),
file = paste0(htmlinfo$htmldir, htmlinfo$indexpath), append = TRUE)
write(paste0(length(all_reg_genes), " regulator isoforms covering ",
length(unique(all_reg_genes)), " genes.<br><br>"),
file = paste0(htmlinfo$htmldir, htmlinfo$indexpath), append = TRUE)
################# load information on chip evidence, if exists ###############
weighted_chip_evidence <- NULL
if (file.exists(runinfo$evidfile)){
methods::show(paste0("Loading chip evidence table: ", runinfo$evidfile, "..."))
weighted_chip_evidence <- as.matrix(utils::read.table(runinfo$evidfile, header = TRUE,
row.names = 1, sep = "\t",
quote = ""))
methods::show("chip evidence regulators: ")
showfirstlast(rownames(weighted_chip_evidence))
methods::show("chip evidence regulators: ")
showfirstlast(colnames(weighted_chip_evidence))
binary_chip_evidence <- weighted_chip_evidence
binary_chip_evidence[binary_chip_evidence > 1] <- 1
binary_chip_summary <- table(as.numeric(binary_chip_evidence))
methods::show(signif(binary_chip_summary / ( dim(weighted_chip_evidence)[1] *
dim(weighted_chip_evidence)[2]) * 100, 3))
nonzeroregs <- sum(rowSums(binary_chip_evidence) >= 0)
nonzerotargs <- sum(colSums(binary_chip_evidence) !=
dim(binary_chip_evidence)[1] * -1)
write(paste0(nonzeroregs, " regulators and ", nonzerotargs,
" targets with possible chip evidence."),
file = paste0(htmlinfo$htmldir, htmlinfo$indexpath), append = TRUE)
write(paste0(binary_chip_summary["1"], " (",
signif(binary_chip_summary["1"] / (nonzeroregs *
nonzerotargs) * 100, 3),
"%) of ", nonzeroregs, "*", nonzerotargs,
" possible chip edges have at least one peak.<br>"),
file = paste0(htmlinfo$htmldir, htmlinfo$indexpath), append = TRUE)
bin_summ <- cumSumTable(cbind(as.numeric(binary_chip_evidence),
1 - as.numeric(binary_chip_evidence)))
myrnames <- c("Peaks", "noPeak", "NA")
bin_summ <- cbind(myrnames, bin_summ)
colnames(bin_summ) <- c("RowType", "nCount", "cumCount", "%RowPeaks",
"%RowNoPeak", "%RowNAs")
rownames(bin_summ) <- myrnames
htmlstr <- table2html(bin_summ)
write(htmlstr, file = paste0(htmlinfo$htmldir, htmlinfo$indexpath), append = TRUE)
}
###################### for each saved linker run result ########################
allsummaries <- NULL
for (rfile in runinfo$rfiles){
# rfile <- runinfo$rfiles[1]
methods::show(paste0("Processing ", rfile, "..."))
rundata <- readRDS(rfile)
runinfo$nboots <- 1
runtypestr <- "single_gene"
mymodmeths <- ls(rundata$graphs)
if (!is.null(rundata$raw_results)){
runtypestr <- "multi_module"
mymodmeths <- ls(rundata$modules)
}
for ( mymodmeth in mymodmeths){
# mymodmeth <- mymodmeths[1]
graphslist <- ls(rundata$graphs)
if (runtypestr != "single_gene"){
graphslist <- ls(rundata$graphs[[mymodmeth]])
runinfo$nboots <- length(rundata$raw_results[[mymodmeth]]$bootstrapResults)
}
# for each graph
for ( graphmeth in graphslist){
# graphmeth="VBSR"
graphstr <- paste(sep = ".", runinfo$tagstr, mymodmeth, runtypestr,
graphmeth)
if (runtypestr == "single_gene"){
methods::show(paste0("****************Single Gene Network ", graphmeth))
rungraphs <- list(rundata$graphs[[graphmeth]])
} else {
methods::show(paste0("****************", mymodmeth, " Method: ", graphmeth))
rungraphs <- rundata$graphs[[mymodmeth]][[graphmeth]]
}
final_summary <- linker_summarize_rungraphs(rungraphs = rungraphs,
iso_table = iso_table,
weighted_chip_evidence = weighted_chip_evidence,
graphstr = graphstr,
runinfo = runinfo,
htmlinfo = htmlinfo)
labeled_table <- cbind(runtypestr, mymodmeth, graphmeth, final_summary)
allsummaries <- rbind(allsummaries, labeled_table)
resultspath <- paste0(htmlinfo$txtstr,
runinfo$tagstr, ".all_summaries.txt")
methods::show(paste0("Writing table: ", resultspath))
utils::write.table(allsummaries, paste0(htmlinfo$htmldir, resultspath),
sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
} # end graphmeth
} # end modmeth
} # end rfile
return(allsummaries)
}
create_html_summary(rfiles,tagstr,mapfile,outdir,evidpath)
rfiles
create_html_summary(rfiles,tagstr,mapfile,outdir,evidpath)
ff<-create_html_summary(rfiles,tagstr,mapfile,outdir,evidpath)
devtools::check(document = T)
devtools::check(document = T,BiocCheck())
library(BiocCheck)
devtools::check(document = T,BiocCheck())
devtools::check(document = T,BiocCheck())
devtools::check(document = T)
devtools::check(document = T)
devtools::load_all(".")
devtools::check(document = T)
devtools::check(document = T,"BiocCheck")
devtools::check(document = T,BiocCheck())
library(BiocCheck)
devtools::check(document = T,BiocCheck())
?devtools::check
ff <- list(hey=1,hou=2,T=T)
ff$T
T <- 3
T
BiocCheck()
BiocCheck()
BiocCheck()
devtools::check(document = T)
library(BiocCheck)
ll <- matrix()
ll
sample(c(1,2,3,4,5),5)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
sample(c(1,2,3,4,5),1)
c(1,2,3,4,5)%*%c(3,4,5,6,7)
c(1,2,3,4,5)*c(3,4,5,6,7)
seq(1,5)
seq(5)
seq_len(5)
seq_along(c(1,2,3,4,5))
seq_along(c(1,2,75,4,5))
?signif
signif(0.54543,2)
signif(3.581293512938912801,2)
round(3.581293512938912801,2)
round(3.581293512938912801,1)
round()
round
signif(0.000000087,2)
signif(0.000000087,3)
round(0.000000087,3)
signif(0.0000000875,2)
?svd
