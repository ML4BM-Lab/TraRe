phenotype_file=phenotype_file_v,
final_signif_thresh=final_signif_thresh)
library(TraRe)
wd<-"D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/sickandhealthy/"
#Remember from rewiring method that we need 4 files
linker_rds_v<-c(paste0(wd,'combined_flugaza_linker_output.rds'))
expr_mat_v<-c(paste0(wd,'combined_expression.txt'))
gene_info_v<-c(paste0(wd,'flugaza_geneinfo.txt'))
phenotype_file_v<-c(paste0(wd,'rewiring_tests/clinicNPM1.txt'))
final_signif_thresh<-c(0.001)
foo<-preparerewiring(name="flugaza_NPM1",
linker_saved_file=linker_rds_v,
expr_matrix_file=expr_mat_v,
gene_info_file=gene_info_v,
phenotype_file=phenotype_file_v,
final_signif_thresh=final_signif_thresh)
runrewiring(foo)
?plot_igraph
rdslinker<- readRDS(linker_rds_v)
geneinfo <- read.table(file=gene_info_v,header=T,sep="\t",stringsAsFactors = F)
expressionmat <- as.matrix(read.table(file=expr_mat_v,header=T,sep="\t",stringsAsFactors = F))
clinicalfileNPM1 <- read.table(file=phenotype_file_v,header=T,sep="\t",stringsAsFactors = F)
rewmodsNPM1<-c(358,133,363,2,429,670,895,774,293,867)
generate_net_control_experiment<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),]
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#save as rds
saveRDS(list(NR=gcenter,R=gright),file=paste0(getwd(),"/Scripts/Flugaza/outputs/plots/graphobjects/",toString(plottittle),".rds"))
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,2))
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
rdslinker<- readRDS(linker_rds_v)
geneinfo <- read.table(file=gene_info_v,header=T,sep="\t",stringsAsFactors = F)
expressionmat <- as.matrix(read.table(file=expr_mat_v,header=T,sep="\t",stringsAsFactors = F))
clinicalfileNPM1 <- read.table(file=phenotype_file_v,header=T,sep="\t",stringsAsFactors = F)
rewmodsNPM1<-c(358,133,363,2,429,670,895,774,293,867)
generate_net_control_experiment(rdslinker,rewmodsRC,expressionmat,geneinfo,clinicalfileRC,"NPM1")
generate_net_control_experiment(rdslinker,rewmodsNPM1,expressionmat,geneinfo,clinicalfileNPM1,"NPM1")
length(rdslinker$modules$VBSR)
rdslinker<- readRDS(linker_rds_v)$modules$VBSR
length(rdslinker)
generate_net_control_experiment(rdslinker,rewmodsNPM1,expressionmat,geneinfo,clinicalfileNPM1,"NPM1")
clinicalfileNPM1$Class
clinicalfileNPM1$Sample.ID
generate_net_control_experiment(rdslinker,rewmodsNPM1,expressionmat,geneinfo,clinicalfileNPM1,"NPM1")
dim(expressionmat)
colnames(expressionmat)
dim(clinicalfileNPM1)
generate_net_control_experiment<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
expressionmat<-expressionmat[,which(colnames(expressionmat)%in%clinicalfile$Sample.ID)]
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),]
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#save as rds
saveRDS(list(NR=gcenter,R=gright),file=paste0(getwd(),"/Scripts/Flugaza/outputs/plots/graphobjects/",toString(plottittle),".rds"))
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,2))
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
generate_net_control_experiment(rdslinker,rewmodsNPM1,expressionmat,geneinfo,clinicalfileNPM1,"NPM1")
expressionmat <- as.matrix(read.table(file=expr_mat_v,header=T,sep="\t",stringsAsFactors = F))
expressionmat<-expressionmat[,which(colnames(expressionmat)%in%clinicalfile$Sample.ID)]
expressionmat<-expressionmat[,which(colnames(expressionmat)%in%clinicalfileNPM1$Sample.ID)]
dim(expressionmat)
generate_net_control_experiment<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
expressionmat<-expressionmat[,which(colnames(expressionmat)%in%clinicalfile$Sample.ID)]
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),]
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#save as rds
saveRDS(list(NR=gcenter,R=gright),file=paste0(getwd(),"/Scripts/Flugaza/outputs/plots/graphobjects/",toString(plottittle),".rds"))
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,2))
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
#INSIDE SICK DATA
#RC (0.025)
rdslinker<- readRDS(linker_rds_v)$modules$VBSR
geneinfo <- read.table(file=gene_info_v,header=T,sep="\t",stringsAsFactors = F)
expressionmat <- as.matrix(read.table(file=expr_mat_v,header=T,sep="\t",stringsAsFactors = F))
clinicalfileNPM1 <- read.table(file=phenotype_file_v,header=T,sep="\t",stringsAsFactors = F)
rewmodsNPM1<-c(358,133,363,2,429,670,895,774,293,867)
generate_net_control_experiment(rdslinker,rewmodsNPM1,expressionmat,geneinfo,clinicalfileNPM1,"NPM1")
generate_net_control_experiment<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
expressionmat<-expressionmat[,which(colnames(expressionmat)%in%clinicalfile$Sample.ID)]
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),]
return (lognorm_est_counts)
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#save as rds
saveRDS(list(NR=gcenter,R=gright),file=paste0(getwd(),"/Scripts/Flugaza/outputs/plots/graphobjects/",toString(plottittle),".rds"))
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,2))
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
foo<-generate_net_control_experiment(rdslinker,rewmodsNPM1,expressionmat,geneinfo,clinicalfileNPM1,"NPM1")
dim(foo)
clinicalfileNPM1$Class
clinicalfileNPM1$Sample.ID
clinicalfile$Sample.ID[clinicalfileNPM1$Class==1]
clinicalfileNPM1$Sample.ID[clinicalfileNPM1$Class==1]
expressionmat[,clinicalfileNPM1$Sample.ID[clinicalfileNPM1$Class==1]]
ll<-expressionmat[,clinicalfileNPM1$Sample.ID[clinicalfileNPM1$Class==1]]
dim(ll)
generate_net_control_experiment<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
expressionmat<-expressionmat[,which(colnames(expressionmat)%in%clinicalfile$Sample.ID)]
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),]
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
return (lognorm_est_counts)
#show("generating graphs")
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#save as rds
saveRDS(list(NR=gcenter,R=gright),file=paste0(getwd(),"/Scripts/Flugaza/outputs/plots/graphobjects/",toString(plottittle),".rds"))
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,2))
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
foo<-generate_net_control_experiment(rdslinker,rewmodsNPM1,expressionmat,geneinfo,clinicalfileNPM1,"NPM1")
[clinicalfileNPM1$Class==1]
clinicalfileNPM1$Class==1
colnames(expressionmat)
clinicalfileNPM1$Sample.ID
clinicalfileNPM1$Class
generate_net_control_experiment<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
expressionmat<-expressionmat[,which(colnames(expressionmat)%in%clinicalfile$Sample.ID)]
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),]
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
return (lognorm_est_counts)
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#save as rds
saveRDS(list(NR=gcenter,R=gright),file=paste0(getwd(),"/Scripts/Flugaza/outputs/plots/graphobjects/",toString(plottittle),".rds"))
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,2))
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
dim(foo)
clinicalfileNPM1$Class==0
clinicalfileNPM1$Sample.ID[clinicalfileNPM1$Class==0]
ll<-expressionmat[,clinicalfileNPM1$Sample.ID[clinicalfileNPM1$Class==0]]
colnames(expressionmat)
expressionmat <- as.matrix(read.table(file=expr_mat_v,header=T,sep="\t",stringsAsFactors = F))
colnames(expressionmat)
?read.table
generate_net_control_experiment<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
expressionmat<-expressionmat[,which(colnames(expressionmat)%in%clinicalfile$Sample.ID)]
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),]
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#save as rds
saveRDS(list(NR=gcenter,R=gright),file=paste0(getwd(),"/Scripts/Flugaza/outputs/plots/graphobjects/",toString(plottittle),".rds"))
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,2))
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
#INSIDE SICK DATA
#RC (0.025)
rdslinker<- readRDS(linker_rds_v)$modules$VBSR
geneinfo <- read.table(file=gene_info_v,header=T,sep="\t",stringsAsFactors = F)
expressionmat <- as.matrix(read.table(file=expr_mat_v,header=T,sep="\t",stringsAsFactors = F,check.names = F))
clinicalfileNPM1 <- read.table(file=phenotype_file_v,header=T,sep="\t",stringsAsFactors = F,check.names = F)
rewmodsNPM1<-c(358,133,363,2,429,670,895,774,293,867)
generate_net_control_experiment(rdslinker,rewmodsNPM1,expressionmat,geneinfo,clinicalfileNPM1,"NPM1")
getwd()
generate_net_control_experiment<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
expressionmat<-expressionmat[,which(colnames(expressionmat)%in%clinicalfile$Sample.ID)]
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),]
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#save as rds
#saveRDS(list(NR=gcenter,R=gright),file=paste0(getwd(),toString(plottittle),".rds"))
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,2))
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
generate_net_control_experiment(rdslinker,rewmodsNPM1,expressionmat,geneinfo,clinicalfileNPM1,"NPM1")
plot_igraph
library(TraRe)
generate_net_control_experiment(rdslinker,rewmodsNPM1,expressionmat,geneinfo,clinicalfileNPM1,"NPM1")
generate_net_control_experiment<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
expressionmat<-expressionmat[,which(colnames(expressionmat)%in%clinicalfile$Sample.ID)]
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),]
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#save as rds
#saveRDS(list(NR=gcenter,R=gright),file=paste0(getwd(),toString(plottittle),".rds"))
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,2))
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
#INSIDE SICK DATA
#RC (0.025)
rdslinker<- readRDS(linker_rds_v)$modules$VBSR
geneinfo <- read.table(file=gene_info_v,header=T,sep="\t",stringsAsFactors = F)
expressionmat <- as.matrix(read.table(file=expr_mat_v,header=T,sep="\t",stringsAsFactors = F,check.names = F))
clinicalfileNPM1 <- read.table(file=phenotype_file_v,header=T,sep="\t",stringsAsFactors = F,check.names = F)
rewmodsNPM1<-c(358,133,363,2,429,670,895,774,293,867)
generate_net_control_experiment(rdslinker,rewmodsNPM1,expressionmat,geneinfo,clinicalfileNPM1,"NPM1")
wd<-"D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/sickandhealthy/"
#Remember from rewiring method that we need 4 files
linker_rds_v<-c(paste0(wd,'combined_flugaza_linker_output.rds'))
expr_mat_v<-c(paste0(wd,'combined_expression.txt'))
gene_info_v<-c(paste0(wd,'flugaza_geneinfo.txt'))
phenotype_file_v<-c(paste0(wd,'rewiring_tests/clinicNPM1.txt'))
final_signif_thresh<-c(0.001)
generate_net_control_experiment<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
expressionmat<-expressionmat[,which(colnames(expressionmat)%in%clinicalfile$Sample.ID)]
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),]
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#save as rds
#saveRDS(list(NR=gcenter,R=gright),file=paste0(getwd(),toString(plottittle),".rds"))
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,2))
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
#INSIDE SICK DATA
#RC (0.025)
rdslinker<- readRDS(linker_rds_v)$modules$VBSR
geneinfo <- read.table(file=gene_info_v,header=T,sep="\t",stringsAsFactors = F)
expressionmat <- as.matrix(read.table(file=expr_mat_v,header=T,sep="\t",stringsAsFactors = F,check.names = F))
clinicalfileNPM1 <- read.table(file=phenotype_file_v,header=T,sep="\t",stringsAsFactors = F,check.names = F)
rewmodsNPM1<-c(358,133,363,2,429,670,895,774,293,867)
generate_net_control_experiment(rdslinker,rewmodsNPM1,expressionmat,geneinfo,clinicalfileNPM1,"NPM1")
?registerDoParallel
generate_net_control_experiment<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
expressionmat<-expressionmat[,which(colnames(expressionmat)%in%clinicalfile$Sample.ID)]
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),]
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#save as rds
#saveRDS(list(NR=gcenter,R=gright),file=paste0(getwd(),toString(plottittle),".rds"))
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,2))
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
doParallel::registerDoParallel()
}
#INSIDE SICK DATA
#RC (0.025)
rdslinker<- readRDS(linker_rds_v)$modules$VBSR
geneinfo <- read.table(file=gene_info_v,header=T,sep="\t",stringsAsFactors = F)
expressionmat <- as.matrix(read.table(file=expr_mat_v,header=T,sep="\t",stringsAsFactors = F,check.names = F))
clinicalfileNPM1 <- read.table(file=phenotype_file_v,header=T,sep="\t",stringsAsFactors = F,check.names = F)
rewmodsNPM1<-c(358,133,363,2,429,670,895,774,293,867)
generate_net_control_experiment(rdslinker,rewmodsNPM1,expressionmat,geneinfo,clinicalfileNPM1,"NPM1")
devtools::load_all(".")
library(TraRe)
library(TraRe)
devtools::check(document = T)
