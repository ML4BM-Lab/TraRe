library(TraRe)
devtools::check(document = TRUE)
BiocCheck::BiocCheck()
devtools::check(document = TRUE)
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
devtools::check(document = TRUE)
BiocCheck::BiocCheck()
ff <- readRDS('C:/Users/jdelafuentec/Downloads/flugaza_SICKvsHSCs_0.001/refinedsumm.rds')
ff$full_graph
plot(ff$full_graph)
grDevices::colorRamp(c('darkred','lightgrey','darkgreen'))
edge<-grDevices::colorRamp(c('darkred','lightgrey','darkgreen'))
edge(4)
edge(1)
edge(0.2)
edge(0.9)
edge(0.15)
?grDevices
?grDevices::colorRamp
edge <- grDevices::colorRamp(c('#8B0000','#D3D3D3','#006400'))
edge(4)
edge(1)
edge(0.2)
edge(0.15)
edge(0.)
edge(0)
E(ff$respond_graph)$weights
igraph::E(ff$respond_graph)$weights
igraph::E(ff$respond_graph)
igraph::E(ff$respond_graph)$weight
edge(-0.18)
NA/255
edge(abs(-0.18))
sessionInfo()
gc()
sessionInfo()
sessionInfo()
sessionInfo()
ff<-read.delim(file='C:/Users/jdelafuentec/Downloads/scRNA-Seq_reference_melanoma_Tirosh_Fig2b-d.txt')
dim(ff)
head(ff)
ff[1:5,1:5]
ff <- readRDS(file='C:/Users/Jesus/Downloads/clusters')
ff$clusters
devtools::check(document = TRUE)
?plot.pvclust
BiocCheck::BiocCheck()
BiocCheck::BiocCheckGitClone()
?pv_clust
?pvclust::pvclust
pdf(file='C:/Users/Jesus/Desktop/plot.pdf',800,500)
plot(c(1,2),c(3,4))
dev.off()
plot(c(1,2),c(3,4))
pdf(file='C:/Users/Jesus/Desktop/plot.pdf',800,500)
par(c(1,1))
par(mfrow=c(1,1))
plot(c(1,2),c(3,4))
dev.off()
dev.off()
pdf(file='C:/Users/Jesus/Desktop/plot.pdf',800,500)
par(mfrow=c(1,1))
plot(c(1,2),c(3,4))
dev.off()
pdf(file='C:/Users/Jesus/Desktop/plot.pdf',800,500)
par(mfrow=c(1,1))
print(plot(c(1,2),c(3,4)))
dev.off()
pdf(file='C:/Users/Jesus/Desktop/plot.pdf',800,500)
print(plot(c(1,2),c(3,4)))
dev.off()
pdf(file='C:/Users/Jesus/Desktop/plot.pdf',800,500)
ff <- plot(c(1,2),c(3,4))
print(ff)
dev.off()
pdf(file='C:/Users/Jesus/Desktop/plot.pdf',800,500)
plot(c(1,2),c(3,4))
dev.off()
plot(c(1,2,3),c(4,4,6))
?png
?pdf
c(1,2)
seq_along(list(a=1,b=2))
seq_len(list(a=1,b=2))
length(list(a=1,b=2))
hey <- function(a){
print(a)
return()
}
hey()
hey(2)
derp
?derp
?devtools::check
library(TraRe)
devtools::check(document = TRUE)
devtools::check(document=TRUE)
getwd()
paste0(system.file("extdata",package="TraRe"),"/RewiringReport/")
library(TraRe)
?devtools::check
devtools::check(document=TRUE,vignettes=FALSE)
ff <- readRDS('C:/Users/jdelafuentec/Dropbox/PhD/TraRe/inst/extdata/prepared_rewiring_example.rds')
ff$outdir
ff$outdir<-"C:/Users/jdelafuentec/Dropbox/PhD/TraRe/inst/extdata/example_0.05"
saveRDS('C:/Users/jdelafuentec/Dropbox/PhD/TraRe/inst/extdata/prepared_rewiring_example.rds')
saveRDS(ff,'C:/Users/jdelafuentec/Dropbox/PhD/TraRe/inst/extdata/prepared_rewiring_example.rds')
devtools::check(document=TRUE,vignettes=FALSE)
devtools::check(document=TRUE)
devtools::check(document=TRUE)
length('https://....')
length(c('https://....'))
length(c('https://....','heyeyehey'))
length(NULL)
devtools::check(document=TRUE)
library(TraRe)
library(TraRe)
pp <- 'G:/Mi unidad/PhD/Trare_firstapproach/Trare_github/rewiring/input/'
expr <- c(paste0(pp,'expression/prom_expression.txt'),paste0(pp,'expression/su2c_expresion_ABI.txt'))
clinic <- c(paste0(pp,'clinical/promote_clinical.txt'),paste0(pp,'clinical/su2c_clinical_ABI.txt'))
geneinfo <- c(paste0(pp,'geneinfo/promote_geneinfo.txt'),paste0(pp,'geneinfo/su2c_geneinfo.txt'))
link <- c(paste0(pp,'rds/promote.rds'),paste0(pp,'rds/su2c.rds'))
foo <- preparerewiring(linker_saved_file = link,expr_matrix_file = expr,
gene_info_file = geneinfo,phenotype_file = clinic)
utils::read.delim(expr[1])
utils::read.delim(expr[2])
library(TraRe)
pp <- 'G:/Mi unidad/PhD/Trare_firstapproach/Trare_github/rewiring/input/'
expr <- c(paste0(pp,'expression/prom_expression.txt'),paste0(pp,'expression/su2c_expression_ABI.txt'))
clinic <- c(paste0(pp,'clinical/promote_clinical.txt'),paste0(pp,'clinical/su2c_clinical_ABI.txt'))
geneinfo <- c(paste0(pp,'geneinfo/promote_geneinfo.txt'),paste0(pp,'geneinfo/su2c_geneinfo.txt'))
link <- c(paste0(pp,'rds/promote.rds'),paste0(pp,'rds/su2c.rds'))
foo <- preparerewiring(linker_saved_file = link,expr_matrix_file = expr,
gene_info_file = geneinfo,phenotype_file = clinic)
runrewiring(foo)
?preparerewiring
foo$datasets[[1]]$final_signif_thresh
foo$datasets[[2]]$final_signif_thresh
library(TraRe)
pp <- 'G:/Mi unidad/PhD/Trare_firstapproach/Trare_github/rewiring/input/'
expr <- c(paste0(pp,'expression/prom_expression.txt'),paste0(pp,'expression/su2c_expression_ABI.txt'))
clinic <- c(paste0(pp,'clinical/promote_clinical.txt'),paste0(pp,'clinical/su2c_clinical_ABI.txt'))
geneinfo <- c(paste0(pp,'geneinfo/promote_geneinfo.txt'),paste0(pp,'geneinfo/su2c_geneinfo.txt'))
link <- c(paste0(pp,'rds/promote.rds'),paste0(pp,'rds/su2c.rds'))
finn <- c(0.05,0.05)
foo <- preparerewiring(linker_saved_file = link,expr_matrix_file = expr,
gene_info_file = geneinfo,phenotype_file = clinic)
runrewiring(foo)
preparerewiring
foo$outdir
library(TraRe)
pp <- 'G:/Mi unidad/PhD/Trare_firstapproach/Trare_github/rewiring/input/'
expr <- c(paste0(pp,'expression/prom_expression.txt'),paste0(pp,'expression/su2c_expression_ABI.txt'))
clinic <- c(paste0(pp,'clinical/promote_clinical.txt'),paste0(pp,'clinical/su2c_clinical_ABI.txt'))
geneinfo <- c(paste0(pp,'geneinfo/promote_geneinfo.txt'),paste0(pp,'geneinfo/su2c_geneinfo.txt'))
link <- c(paste0(pp,'rds/promote.rds'),paste0(pp,'rds/su2c.rds'))
finn <- c(0.05,0.05)
foo <- preparerewiring(linker_saved_file = link,expr_matrix_file = expr,
gene_info_file = geneinfo,phenotype_file = clinic,
final_signif_thresh = finn)
runrewiring(foo)
foo <- readRDS('C:/Users/Jesus/Dropbox/PhD/TraRe/inst/extdata/prepared_rewiring_example.rds')
foo$outdir
getwd()
devtools::check(document=TRUE)
foo
foo <- readRDS('C:/Users/Jesus/Dropbox/PhD/TraRe/inst/extdata/prepared_rewiring_example.rds')
foo$outdir
foo$outdir <- NULL
foo$outdir <- 'Put a valid path here'
saveRDS(foo,'C:/Users/Jesus/Dropbox/PhD/TraRe/inst/extdata/prepared_rewiring_example.rds')
devtools::check(document=TRUE)
devtools::check(document=TRUE)
devtools::check(document=TRUE)
install.packages('librarian')
librarian::is_valid_url(gpath)
library(librarian)
RCurl::getURL(gpath)
gpath
gpath <- paste0(system.file('extdata',package='TraRe'),'/refinedsumm.rds')
RCurl::getURL(gpath)
excel_generation_tests <- function(){
obs <-tryCatch(excel_generation('Not working path'),error=conditionMessage)
RUnit::checkIdentical('refinedsumm.rds in the specified folder must exist', obs)
workingpath <- system.file('extdata',package='TraRe')
obs <-tryCatch(excel_generation(workingpath,cliquesbool='non-logical'),error=conditionMessage)
RUnit::checkIdentical('non-logical variable pass to this cliquesbool argument', obs)
}
excel_generation_tests()
excel_generation_tests <- function(){
obs <-tryCatch(excel_generation(),error=conditionMessage)
RUnit::checkIdentical('Path to the graph object must be specified', obs)
obs <-tryCatch(excel_generation('Not working path'),error=conditionMessage)
RUnit::checkIdentical('graph object in the specified folder must exist', obs)
workingpath <- system.file('extdata',package='TraRe')
obs <-tryCatch(excel_generation(workingpath,cliquesbool='non-logical'),error=conditionMessage)
RUnit::checkIdentical('non-logical variable pass to this cliquesbool argument', obs)
}
excel_generation_tests()
obs
obs <-tryCatch(excel_generation(),error=conditionMessage)
obs
library(TraRe)
excel_generation_tests <- function(){
obs <-tryCatch(excel_generation(),error=conditionMessage)
RUnit::checkIdentical('Path to the graph object must be specified', obs)
obs <-tryCatch(excel_generation('Not working path'),error=conditionMessage)
RUnit::checkIdentical('graph object in the specified folder must exist', obs)
workingpath <- system.file('extdata',package='TraRe')
obs <-tryCatch(excel_generation(workingpath,cliquesbool='non-logical'),error=conditionMessage)
RUnit::checkIdentical('non-logical variable pass to this cliquesbool argument', obs)
}
excel_generation_tests()
url(gpath) == gpath
gpath
ll <- readRDS(path)
ll <- readRDS(gpath)
ll
file.exists(gpath)
ll <- 'https://github.com/jesusdfc/TraRe/raw/master/Su2c_0.05/refinedsumm.rds'
file.exists(gpath)
file.exists(ll)
url(ll)
url('https://www.google.es')
url('https://www.hey.es')
url('https://algo.es')
url(gpath)
gpath
url('https://algo.es')
ll<-url('https://algo.es')
ll['class']
ll
class(ll)
ll[['class']]
ll[[1]]
ll[[2]]
ll[1]
ll[2]
?url
ll
class(url)
url
ll <- url('https://www.google.es')
ll
class(ll)
grep(ll)
?grap
?grep
grep('class',ll)
url.show(gpath)
url('https://www.google.es')
url('https://www.google.es')
params(url)
list(ll)
ll
?param_get
install.packages('urltools')
urltools::param_get(ll,'class')
urltools::param_get(ll,'method')
ll
class(ll)
ll$class
ll[['class']]
is.complex(ll)
is.raw(ll)
is.logical(ll)
isClass(ll)
is.character(ll)
class(ll)
toString(ll)
ll.
list(ll)
url
.Internal
.Internal()
.Primitive(ll)
.Primitive
ll
ll('class')
attr(ll)
attr(ll,x = 'class')
?attr
attr(ll,'class')
attr(ll,'mode')
attr('https://www.google.es','class')
gg <- 'https:://www.google.es'
attr(gg,'class')
library(TraRe)
excel_generation_tests <- function(){
obs <-tryCatch(excel_generation(),error=conditionMessage)
RUnit::checkIdentical('Path to the graph object must be specified', obs)
obs <-tryCatch(excel_generation('Not working path'),error=conditionMessage)
RUnit::checkIdentical('graph object in the specified folder must exist', obs)
workingpath <- system.file('extdata',package='TraRe')
obs <-tryCatch(excel_generation(workingpath,cliquesbool='non-logical'),error=conditionMessage)
RUnit::checkIdentical('non-logical variable pass to this cliquesbool argument', obs)
}
excel_generation_tests()
library(TraRe)
excel_generation_tests()
attr('https://www.google.es','class')==c('url','connection')
if(attr('https://www.google.es','class')==c('url','connection'))
print('hello')
if(!logical(0)){print('hello')}
if(!FALSE{print('hello')}
if(!FALSE){print('hello')}
if(!logical(0)){print('hello')}
ll
foo <- url('https://www.google.es')
foo
foo <- url('https://www.stackoverflow.com')
foo
runlinker_testmatrix<- function(){
obs <-tryCatch(LINKER_run(lognorm_est_counts=NULL,
target_filtered_idx=seq_len(15),
regulator_filtered_idx=15+seq_len(3)),error=conditionMessage)
RUnit::checkIdentical("lognorm_est_counts field empty", obs)
obs <-tryCatch(LINKER_run(lognorm_est_counts="text",
target_filtered_idx=seq_len(15),
regulator_filtered_idx=15+seq_len(3)),error=conditionMessage)
RUnit::checkIdentical("matrix class is required for input dataset", obs)
obs <-tryCatch(LINKER_run(lognorm_est_counts=matrix(vapply(seq_len(18),toString,FUN.VALUE = c("1")),6,3),
target_filtered_idx=seq_len(15),
regulator_filtered_idx=15+seq_len(3)),error=conditionMessage)
RUnit::checkIdentical("non-numeric values inside lognorm_est_counts variable", obs)
obs <-tryCatch(LINKER_run(lognorm_est_counts=matrix(seq_len(18),6,3),
target_filtered_idx=seq_len(15),
regulator_filtered_idx=15+seq_len(3)),error=conditionMessage)
RUnit::checkIdentical("null field detected in row names or column names, check lognorm_est_counts matrix", obs)
}
library(TraRe)
runlinker_testmatrix<- function(){
obs <-tryCatch(LINKER_run(lognorm_est_counts=NULL,
target_filtered_idx=seq_len(15),
regulator_filtered_idx=15+seq_len(3)),error=conditionMessage)
RUnit::checkIdentical("lognorm_est_counts field empty", obs)
obs <-tryCatch(LINKER_run(lognorm_est_counts="text",
target_filtered_idx=seq_len(15),
regulator_filtered_idx=15+seq_len(3)),error=conditionMessage)
RUnit::checkIdentical("matrix class is required for input dataset", obs)
obs <-tryCatch(LINKER_run(lognorm_est_counts=matrix(vapply(seq_len(18),toString,FUN.VALUE = c("1")),6,3),
target_filtered_idx=seq_len(15),
regulator_filtered_idx=15+seq_len(3)),error=conditionMessage)
RUnit::checkIdentical("non-numeric values inside lognorm_est_counts variable", obs)
obs <-tryCatch(LINKER_run(lognorm_est_counts=matrix(seq_len(18),6,3),
target_filtered_idx=seq_len(15),
regulator_filtered_idx=15+seq_len(3)),error=conditionMessage)
RUnit::checkIdentical("null field detected in row names or column names, check lognorm_est_counts matrix", obs)
}
runlinker_testmatrix()
summary(ll)
ll <- url('https://www.google.es')
summary(ll)
summary(ll)$class
res<-try(vbsr::vbsr(y,t(X),n_orderings = 15,family='normal'))
inherits(res,'try-error')
attr(ll)
attributes(ll)
str(ll)
gpath2 <- paste0(system.file('extdata',package='TraRe'),'/refinedsumm.rds')
gpath
gpath2
gpath <- url('https://github.com/jesusdfc/TraRe/raw/master/Su2c_0.05/refinedsumm.rds')
url(gpath2)
class(url(gpath2))
try(url(gpath))
class(try(url(gpath)))
inherits(try(url(gpath)),'try-error')
summary('https://www.google.es')
summary('https://www.google.es')$class
summary(ll)$class
library(TraRe)
excel_generation_tests <- function(){
obs <-tryCatch(excel_generation(),error=conditionMessage)
RUnit::checkIdentical('Path to the graph object must be specified', obs)
obs <-tryCatch(excel_generation('Not working path'),error=conditionMessage)
RUnit::checkIdentical('graph object in the specified folder must exist', obs)
workingpath <- system.file('extdata',package='TraRe')
obs <-tryCatch(excel_generation(workingpath,cliquesbool='non-logical'),error=conditionMessage)
RUnit::checkIdentical('non-logical variable pass to this cliquesbool argument', obs)
}
excel_generation_tests()
library(TraRe)
excel_generation_tests()
ff <- 'Not working path'
inherits(try(summary(ff)$class,'try-error'))
library(TraRe)
excel_generation_tests()
?try
library(TraRe)
excel_generation_tests()
devtools::check(document=TRUE)
library(TraRe)
expr_matrix <- 'https://github.com/jesusdfc/TraRe/raw/master/expression_rewiring_example.txt'
gene_info <- 'https://github.com/jesusdfc/TraRe/raw/master/geneinfo_rewiring_example.txt'
linker_output <-  'https://github.com/jesusdfc/TraRe/raw/master/linker_rewiring_example.rds'
phenotype_info <- 'https://github.com/jesusdfc/TraRe/raw/master/phenotype_rewiring_example.txt'
prepared <- preparerewiring(name="Vignette",linker_output,expr_matrix,gene_info,
phenotype_info,final_signif_thresh=0.05)
graph <- readRDS(url('https://github.com/jesusdfc/TraRe/raw/master/graph_netrun_example.rds'))
graph <- graph$graphs$VBSR
# We first generate the normal layout for the plot.
# We need the drivers and target names.
drivers <- readRDS(url('https://github.com/jesusdfc/TraRe/raw/master/tfs_linker_example.rds'))
targets <- readRDS(url('https://github.com/jesusdfc/TraRe/raw/master/targets_linker_example.rds'))
# Note that the generated graph may not have the same drivers and targets we used
# for generating it, so we wil extract those genes and check in the gene_info file
# if they are drivers or targets.
geneinfo <- url('https://github.com/jesusdfc/TraRe/raw/master/geneinfo_rewiring_example.txt')
geneinfo <- read.delim(file=geneinfo)[,c("uniq_isos","regulator")]
R<-intersect(geneinfo[geneinfo$regulator==1,1],names(igraph::V(graph)))
P<-intersect(geneinfo[geneinfo$regulator==0,1],names(igraph::V(graph)))
drivers_n <- rownames(drivers[R,])
targets_n <- rownames(targets[P,])
# As for this example we are working at gene level (we dont have transcripts inside genes),
# we wont need namehash parameter (see param `namehash`)
normal_layout <- return_layout(drivers_n,targets_n)
# We need to separate our expression matrix by a binary phenotype.
# This is what the clinical file is used for.
gnames <- c(drivers_n,targets_n)
expmat <-rbind(drivers,targets)
clinic <- url('https://github.com/jesusdfc/TraRe/raw/master/phenotype_rewiring_example.txt')
clinic <- utils::read.delim(clinic)
expmat_R <- expmat[,clinic$Sample.ID[clinic$Class=='R']]
expmat_NR <- expmat[,clinic$Sample.ID[clinic$Class=='NR']]
# We now generate the phenotype layout and the `varfile` we need for this layout.
# (I leave here a way to generate)
varfile <- t(as.matrix(sapply(gnames,
function(x) c(stats::t.test(expmat_R[x,],expmat_NR[x,])$statistic,
if(x%in%drivers_n) 1 else 0))))
colnames(varfile)<-c("t-stat","is-regulator")
phenotype_layout <- return_layout_phenotype(drivers_n,targets_n,varfile)
plot_igraph(graph,mytitle="Normal Layout",titlecol="black",mylayout=normal_layout)
plot_igraph(graph,mytitle="Phenotype Layout",titlecol="black",mylayout=phenotype_layout)
gpath <- url('https://github.com/jesusdfc/TraRe/raw/master/Su2c_0.05/refinedsumm.rds')
## We are going to use the drivers dataset from the external data folder as well.
## For more information about generatecliques() please check the corresponding help page.
dataset<- readRDS(url('https://github.com/jesusdfc/TraRe/raw/master/tfs_linker_example.rds'))
excel_generation(gpath=gpath,dataset=dataset)
gpath
url('https://www.google.es')
dataset
dim(dataset)
library(TraRe)
devtools::check(document=TRUE)
BiocCheck::BiocCheck()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
install.packages('ubioinformat/TraRe',ref='try')
install.packages('ubioinformat/TraRe')
devtools::install_github(repo='ubioinformat/TraRe',ref='try')
?preparerewiring
library(TraRe)
?preparerewiring
