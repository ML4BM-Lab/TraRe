#prepare the layout
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph_v2(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph_v2(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph_v2(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
generate_plots(rdslinker,CEBPA_mods,expressionmat,geneinfo,clinicalfile,"CEBPA")
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
generate_plots(rdslinker,CEBPA_mods,expressionmat,geneinfo,clinicalfile,"CEBPA")
dev.off()
dev.off()
dev.off()
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
return(list(gleft=gleft,mylayout=mylaout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
foo<-generate_plots(rdslinker,CEBPA_mods,expressionmat,geneinfo,clinicalfile,"CEBPA")
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
return(list(gleft=gleft,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
foo<-generate_plots(rdslinker,CEBPA_mods,expressionmat,geneinfo,clinicalfile,"CEBPA")
foo$gleft
plot_igraph(foogleft,"","black",foo$mylayout)
plot_igraph(foo$gleft,"","black",foo$mylayout)
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
return(list(gleft=gleft,gcenter=gcenter,gright=gright,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
foo<-generate_plots(rdslinker,CEBPA_mods,expressionmat,geneinfo,clinicalfile,"CEBPA")
plot_igraph(foo$gcenter,"","black",foo$mylayout)
plot_igraph(foo$gright,"","black",foo$mylayout)
gright
foo$gright
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
return(list(lognorm_est_counts_R=lognorm_est_counts_R))
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
return(list(gleft=gleft,gcenter=gcenter,gright=gright,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
foo<-generate_plots(rdslinker,CEBPA_mods,expressionmat,geneinfo,clinicalfile,"CEBPA")
dim(foo$lognorm_est_counts_R)
pathtoindex<-"D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÑO/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/Dataframes/"
miceadds::load.Rdata(filename=paste0(pathtoindex,"FlugazaCounts_Filtered.RData"),ffmatrix)
miceadds::load.Rdata(filename=paste0(pathtoindex,"FlugazaCounts_Filtered.RData"),"ffmatrix")
dim(ffmatrix)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÑO/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/clinicalfiles/"
FavSx <- read.table(file=paste0(wp,'clinicalFav_Sx.txt'))
FavSx_colnames <- c("Sample ID",'Class')
FavSx <- rbind(FavSx[seq_len(nrow(FavSx)/2),],FavSx[nrow(FavSx)/2+seq_len(nrow(FavSx)/2),])
FavSx <- t(FavSx)
FavSx[,2] <- sapply(FavSx[,2],function(x) if (x=="Si") 1 else 0)
colnames(FavSx)<-FavSx_colnames
write.table(FavSx,file=paste0(wp,'clinicalFav_Sx.txt'),sep="\t",row.names=F,quote=F)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÑO/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.001)
runrewiring(preparedobject)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÑO/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.01)
runrewiring(preparedobject)
geneinfo <- read.table(file=geneinfopath,header=T,sep="\t",stringsAsFactors = F)
rdslinker <- readRDS(linkerpath)$modules$VBSR
expressionmat <- as.matrix(read.table(expressionpath,header=T,stringsAsFactors = F,sep="\t"))
clinicalfile <-read.table(file=clinicalpath,header=T,sep="\t",stringsAsFactors = F)
clinicalfile <- clinicalfile[clinicalfile$Sample.ID%in%colnames(expressionmat),] #idk all samples are not in the expression matrix..
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
return(list(lognorm_est_counts_R=lognorm_est_counts_R))
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
return(list(gleft=gleft,gcenter=gcenter,gright=gright,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
foo<-generate_plots(rdslinker,CEBPA_mods,expressionmat,geneinfo,clinicalfile,"Favorable - Sx {Si,No}")
dev.off()
dev.off()
dev.off()
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#return(list(lognorm_est_counts_R=lognorm_est_counts_R))
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
#return(list(gleft=gleft,gcenter=gcenter,gright=gright,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
generate_plots(rdslinker,CEBPA_mods,expressionmat,geneinfo,clinicalfile,"Favorable - Sx {Si,No}")
dev.off()
dev.off()
clinicalfile <-read.table(file=clinicalpath,header=T,sep="\t",stringsAsFactors = F)
clinicalfile
clinicalfile$Sample.ID
table(clinicalfile$Sample.ID%in%colnames(expressionmat))
clinicalfile$Sample.ID
colnames(expressionmat)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÑO/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
runrewiring(preparedobject)
rewmods_005 <- c(159,702,393,928,12,287,591)
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#return(list(lognorm_est_counts_R=lognorm_est_counts_R))
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
#return(list(gleft=gleft,gcenter=gcenter,gright=gright,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
generate_plots(rdslinker,rewmods_001,expressionmat,geneinfo,clinicalfile,"Favorable - Sx {Si,No}")
rewmods_001 <- c(393,159,702,12,287,591)
rewmods_005 <- c(159,702,393,928,12,287,591)
#
generate_plots(rdslinker,rewmods_001,expressionmat,geneinfo,clinicalfile,"Favorable - Sx {Si,No}")
geneinfo <- read.table(file=geneinfopath,header=T,sep="\t",stringsAsFactors = F)
rdslinker <- readRDS(linkerpath)$modules$VBSR
expressionmat <- as.matrix(read.table(expressionpath,header=T,stringsAsFactors = F,sep="\t"))
clinicalfile <-read.table(file=clinicalpath,header=T,sep="\t",stringsAsFactors = F)
clinicalfile <- clinicalfile[clinicalfile$Sample.ID%in%colnames(expressionmat),] #idk all samples are not in the expression matrix..
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#return(list(lognorm_est_counts_R=lognorm_est_counts_R))
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
#return(list(gleft=gleft,gcenter=gcenter,gright=gright,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
generate_plots(rdslinker,rewmods_001,expressionmat,geneinfo,clinicalfile,"Favorable - Sx {Si,No}")
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#return(list(lognorm_est_counts_R=lognorm_est_counts_R))
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
#return(list(gleft=gleft,gcenter=gcenter,gright=gright,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
doParallel::registerDoParallel()
}
generate_plots(rdslinker,rewmods_005,expressionmat,geneinfo,clinicalfile,"Favorable - Sx {Si,No}")
clinicalfile
