expressionmat <- as.matrix(read.table(expressionpath,header=T,stringsAsFactors = F,sep="\t"))
clinicalfile <-read.table(file=clinicalpath,header=T,sep="\t",stringsAsFactors = F)
clinicalfile <- clinicalfile[clinicalfile$Sample.ID%in%colnames(expressionmat),] #idk all samples are not in the expression matrix..
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
return(list(lognorm_est_counts_R=lognorm_est_counts_R))
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
return(list(gleft=gleft,gcenter=gcenter,gright=gright,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
foo<-generate_plots(rdslinker,CEBPA_mods,expressionmat,geneinfo,clinicalfile,"Favorable - Sx {Si,No}")
dev.off()
dev.off()
dev.off()
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#return(list(lognorm_est_counts_R=lognorm_est_counts_R))
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
#return(list(gleft=gleft,gcenter=gcenter,gright=gright,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
generate_plots(rdslinker,CEBPA_mods,expressionmat,geneinfo,clinicalfile,"Favorable - Sx {Si,No}")
dev.off()
dev.off()
clinicalfile <-read.table(file=clinicalpath,header=T,sep="\t",stringsAsFactors = F)
clinicalfile
clinicalfile$Sample.ID
table(clinicalfile$Sample.ID%in%colnames(expressionmat))
clinicalfile$Sample.ID
colnames(expressionmat)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
runrewiring(preparedobject)
rewmods_005 <- c(159,702,393,928,12,287,591)
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#return(list(lognorm_est_counts_R=lognorm_est_counts_R))
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
#return(list(gleft=gleft,gcenter=gcenter,gright=gright,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
generate_plots(rdslinker,rewmods_001,expressionmat,geneinfo,clinicalfile,"Favorable - Sx {Si,No}")
rewmods_001 <- c(393,159,702,12,287,591)
rewmods_005 <- c(159,702,393,928,12,287,591)
#
generate_plots(rdslinker,rewmods_001,expressionmat,geneinfo,clinicalfile,"Favorable - Sx {Si,No}")
geneinfo <- read.table(file=geneinfopath,header=T,sep="\t",stringsAsFactors = F)
rdslinker <- readRDS(linkerpath)$modules$VBSR
expressionmat <- as.matrix(read.table(expressionpath,header=T,stringsAsFactors = F,sep="\t"))
clinicalfile <-read.table(file=clinicalpath,header=T,sep="\t",stringsAsFactors = F)
clinicalfile <- clinicalfile[clinicalfile$Sample.ID%in%colnames(expressionmat),] #idk all samples are not in the expression matrix..
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#return(list(lognorm_est_counts_R=lognorm_est_counts_R))
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
#return(list(gleft=gleft,gcenter=gcenter,gright=gright,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
registerDoParallel()
}
# now we can call generate_plots
generate_plots(rdslinker,rewmods_001,expressionmat,geneinfo,clinicalfile,"Favorable - Sx {Si,No}")
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#return(list(lognorm_est_counts_R=lognorm_est_counts_R))
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs,targets,varfile)
#prepare the layout
#return(list(gleft=gleft,gcenter=gcenter,gright=gright,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
doParallel::registerDoParallel()
}
generate_plots(rdslinker,rewmods_005,expressionmat,geneinfo,clinicalfile,"Favorable - Sx {Si,No}")
clinicalfile
library(TraRe)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
runrewiring(preparedobject)
dev.off()
preparedobject$outdir
library(TraRe)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
runrewiring(preparedobject)
dev.off()
library(TraRe)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
runrewiring(preparedobject)
dev.off()
library(TraRe)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
runrewiring(preparedobject)
dev.off()
library(TraRe)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
runrewiring(preparedobject)
dev.off()
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
runrewiring(preparedobject)
dev.off()
library(TraRe)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
runrewiring(preparedobject)
library(TraRe)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
runrewiring(preparedobject)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
foo<-runrewiring(preparedobject)
rownames(foo$nodesumm)
is.null(rownames(foo$nodesumm))
is.null(colnames(foo$nodesumm))
library(TraRe)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
foo<-runrewiring(preparedobject)
foo$nodesumm
is.null(rownames(foo$nodesumm))
is.null(colnames(foo$nodesumm))
colnames(foo$nodesumm)
library(TraRe)
library(TraRe)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
runrewiring(preparedobject)
generate_plots<-function(rdslinker,rewmods,expressionmat,geneinfo,clinicalfile,plottittle){
totgenes<-unique(Reduce(function(x,y) c(x,y),sapply(rewmods,function(x) c(rdslinker[[x]]$target_genes,rdslinker[[x]]$regulators))))
lognorm_est_counts<-expressionmat[which(rownames(expressionmat)%in%totgenes),clinicalfile$'Sample.ID']
#show("expression matrix generated")
target_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==0)])
regulator_filtered_idx<-which(rownames(lognorm_est_counts)%in%geneinfo$gene.name[which(geneinfo$regulator==1)])
#show("targets and drivers found")
lognorm_est_counts_R<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==1]]
lognorm_est_counts_NR<-lognorm_est_counts[,clinicalfile$Sample.ID[clinicalfile$Class==0]]
#show("generating graphs")
gleft <- NET_run(lognorm_est_counts, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
gcenter <- NET_run(lognorm_est_counts_NR, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
#return(list(lognorm_est_counts_R=lognorm_est_counts_R))
gright <- NET_run(lognorm_est_counts_R, target_filtered_idx, regulator_filtered_idx,
graph_mode=c("VBSR"),
FDR=0.05,
NrCores=3)$graphs$VBSR
regs <- rownames(lognorm_est_counts)[regulator_filtered_idx]
targets <- rownames(lognorm_est_counts)[target_filtered_idx]
varfile <- t(as.matrix(sapply(rownames(lognorm_est_counts),function(x) c(t.test(lognorm_est_counts_NR[x,],lognorm_est_counts_R[x,])$statistic,geneinfo$regulator[which(geneinfo$gene.name%in%x)]))))
colnames(varfile)<-c("t-stat","is-regulator")
#return(list(regs=regs,targets=targets,varfile=varfile,gleft=gleft,gcenter=gcenter,gright=gright))
mylayout <- return_layout_phenotype(regs=regs,targets=targets,varfile=varfile)
#prepare the layout
#return(list(gleft=gleft,gcenter=gcenter,gright=gright,mylayout=mylayout))
png(filename=paste(getwd(),paste(toString(plottittle),".png",sep=""),sep="/"),width=2048, height = 1080)
par(mfrow=c(1,3))
plot_igraph(gleft,paste("All Samples",toString(dim(lognorm_est_counts)[2]),"- "),"black",mylayout) #all samples
plot_igraph(gcenter,paste("NR",toString(dim(lognorm_est_counts_NR)[2]),"- "),"black",mylayout)
plot_igraph(gright,paste("R",toString(dim(lognorm_est_counts_R)[2]),"- "),"black",mylayout)
dev.off()
closeAllConnections()
doParallel::registerDoParallel()
}
library(TraRe)
wp <- "D:/COPIA SEGURIDAD JESUS DE LA FUENTE CEDEÃ‘O/ASIGNATURAS/PFMIdoia/TeleTrabajo/Scripts/Flugaza/inputs/rewiringinputs/onlysick/"
expressionpath <- paste0(wp,'expression/flugaza_counts_norm.txt')
geneinfopath <- paste0(wp,'geneinfo/flugaza_geneinfo.txt')
clinicalpath <- paste0(wp,'clinicalfiles/clinicalFav_Sx.txt')
linkerpath <- paste0(wp,'linker/flugaza_linker_output.rds')
preparedobject<-preparerewiring(name="Favorable - Survival",
linker_saved_file = linkerpath,
expr_matrix_file = expressionpath,
gene_info_file = geneinfopath,
phenotype_file = clinicalpath,
final_signif_thresh = 0.05)
runrewiring(preparedobject)
length(preparedobject$datasets[[1]]$rundata$modules)
seq_along(preparedobject$datasets)
?foreach::foreach
devtools::check(document = T)
devtools::check(document = T)
graph <- readRDS(paste0(system.file("extdata",package="TraRe"),'/graph_netrun_example.rds'))
drivers <- readRDS(paste0(system.file("extdata",package="TraRe"),'/tfs_cliques_example.rds'))
drivers_n <- rownames(drivers)[seq_len(5)]
targets <- readRDS(paste0(system.file("extdata",package="TraRe"),'/targets_linker_example.rds'))
targets_n <- rownames(targets)[seq_len(30)]
namehash <- drivers_n
normal_layout <- return_layout(drivers_n,targets_n,namehash)
graph
igraph::E(mygraph)$weight
igraph::E(graph)$weight
igraph::E(graph)
igraph::E(graph)$weight
plot_igraph <- function(mygraph=NULL, mytitle="", titlecol="black", mylayout=NULL){
if (is.null(mygraph)){
stop("graph object field empty")
}
if (is.null(mylayout)){
stop("layout field empty")
}
if (is.null(igraph::E(mygraph)$weight)){
igraph::E(mygraph)$weight <- rep(1,length(igraph::E(mygraph)))
}
nodecol <- c("darkblue", "darkorange")
framecol <- c("black", "darkorange")
shape <- c("circle", "square")
edge_cscale <- grDevices::colorRamp(c("darkred", "lightgrey", "darkgreen"))
maxw <- max(abs(igraph::E(mygraph)$weight))
tweight = (igraph::E(mygraph)$weight+maxw)/(2*maxw)
igraph::E(mygraph)$color <- apply(edge_cscale(tweight), 1,
function(x) grDevices::rgb(x[1] / 255, x[2] / 255,
x[3] / 255, 0.8))
degrees = igraph::degree(mygraph, igraph::V(mygraph)$name)
nodenames = mylayout$genesnames[igraph::V(mygraph)$name]
regdegrees = degrees[nodenames]
regdegrees[which(is.na(regdegrees))]=""
finalnames = apply(cbind(nodenames,regdegrees),1,paste, collapse=" - ")
plot(mygraph,
vertex.color = nodecol[as.numeric(igraph::V(mygraph)$type) + 1],
vertex.shape = shape[as.numeric(igraph::V(mygraph)$type) + 1],
vertex.label = finalnames,
vertex.label.cex = 1.5,
vertex.frame.color = framecol[as.numeric(igraph::V(mygraph)$type) + 1],
vertex.size = as.numeric(igraph::V(mygraph)$type)*5 + 5,
layout = cbind(mylayout$genesx[igraph::V(mygraph)$name],
mylayout$genesy[igraph::V(mygraph)$name]
)
)
graphics::title(paste0(mytitle, " ", sum(igraph::V(mygraph)$type==1), "&", sum(igraph::V(mygraph)$type==0)), cex.main = 5, col.main = titlecol)
graphics::abline(h=0, col=grDevices::rgb(0,0,0,alpha=0.3))
}
plot_igraph(graph,mytitle="Normal Layout",titlecol="black",mylayout=normal_layout)
devtools::check(document = T)
